#!/usr/bin/env python2

import time
import random
import Tkinter as tk


X=0
QUIT=0


# Zadefinovanie obrazku 12-bit RGB ... mozno pouzit aj 24bit RGB, ale v hrach ?? :-)
stena = """
{#f00 #f00 #ff8 #f00 #f00 #f00 #ff8 #f00 #f00 #f00}
{#ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8}
{#f00 #f00 #f00 #f00 #ff8 #f00 #f00 #f00 #f00 #ff8}
{#f00 #f00 #f00 #f00 #ff8 #f00 #f00 #f00 #f00 #ff8}
{#f00 #f00 #f00 #f00 #ff8 #f00 #f00 #f00 #f00 #ff8}
{#f00 #f00 #f00 #f00 #ff8 #f00 #f00 #f00 #f00 #ff8}
{#ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #f00 #ff8}
{#f00 #f00 #ff8 #f00 #f00 #f00 #ff8 #f00 #f00 #f00}
{#f00 #f00 #ff8 #f00 #f00 #f00 #ff8 #f00 #f00 #f00}
{#f00 #f00 #ff8 #f00 #f00 #f00 #ff8 #f00 #f00 #f00}
"""
gulka = """
{#000 #000 #000 #24f #24f #24f #24f #000 #000 #000}
{#000 #000 #24f #24f #24f #24f #24f #24f #000 #000}
{#000 #24f #24f #24f #24f #24f #777 #24f #24f #000}
{#24f #24f #24f #24f #24f #24f #999 #777 #24f #24f}
{#24f #24f #24f #24f #24f #24f #24f #24f #24f #24f}
{#24f #24f #24f #24f #24f #24f #24f #24f #24f #24f}
{#24f #24f #24f #24f #24f #24f #24f #24f #24f #24f}
{#000 #24f #24f #24f #24f #24f #24f #24f #24f #000}
{#000 #000 #24f #24f #24f #24f #24f #24f #000 #000}
{#000 #000 #000 #24f #24f #24f #24f #000 #000 #000}
"""
tehla = [""" ""","""
{#ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8}
{#ff8 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #884}
{#ff8 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #884}
{#ff8 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #884}
{#ff8 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #884}
{#ff8 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #884}
{#ff8 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #884}
{#ff8 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #884}
{#ff8 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #018 #884}
{#ff1 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884}
""","""
{#ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8}
{#ff8 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #884}
{#ff8 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #884}
{#ff8 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #884}
{#ff8 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #884}
{#ff8 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #884}
{#ff8 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #884}
{#ff8 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #884}
{#ff8 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #081 #884}
{#ff1 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884}
""","""
{#ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8}
{#ff8 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #884}
{#ff8 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #884}
{#ff8 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #884}
{#ff8 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #884}
{#ff8 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #884}
{#ff8 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #884}
{#ff8 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #884}
{#ff8 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #188 #884}
{#ff1 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884}
""","""
{#ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8 #ff8}
{#ff8 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #884}
{#ff8 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #884}
{#ff8 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #884}
{#ff8 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #884}
{#ff8 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #884}
{#ff8 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #884}
{#ff8 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #884}
{#ff8 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #811 #884}
{#ff1 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884 #884}
""" ]

lavka = """
{#888 #888 #888 #888 #888 #888 #888 #888 #888 #888}
{#888 #aaa #aaa #aaa #aaa #aaa #aaa #aaa #aaa #888}
{#888 #aaa #aaa #aaa #aaa #aaa #aaa #aaa #aaa #888}
{#888 #aaa #ccc #ccc #ccc #ccc #ccc #ccc #aaa #888}
{#888 #aaa #ccc #fff #fff #fff #fff #ccc #aaa #888}
{#888 #aaa #ccc #fff #fff #fff #fff #ccc #aaa #888}
{#888 #aaa #ccc #ccc #ccc #ccc #ccc #ccc #aaa #888}
{#888 #aaa #aaa #aaa #aaa #aaa #aaa #aaa #aaa #888}
{#888 #aaa #aaa #aaa #aaa #aaa #aaa #aaa #aaa #888}
{#888 #888 #888 #888 #888 #888 #888 #888 #888 #888}
"""


pole = [
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1,1,3,3,3,1,2,2,2,1,3,3,3,1,1],
  [1,0,1,3,1,0,1,2,1,0,1,3,1,0,1],
  [1,0,0,1,0,0,0,1,0,0,0,1,0,0,1],
  [1,4,0,4,0,4,0,4,0,4,0,4,0,4,1],
  [1,0,4,0,4,0,4,0,4,0,4,0,4,0,1],
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
]


xx=300
yy=300
dx=1
dy=1
lx=300
sirka=50
ech="a"

def quit():
  global wnd,QUIT
  # wnd.quit()
  # wnd.destroy()
  # exit()
  QUIT=1

def keypress(evn):
  global dx,dy,ech,lx
  key = evn.char
  if key == "p" : dx = dx + 0.3
  if key == "o" : dx = dx - 0.3
  if key == "a" : dy = dy - 0.3
  if key == "z" : dy = dy + 0.3
  if key == "m" and ((lx+sirka+20) < 620-5) : lx = lx + 5
  if key == "n" and lx > (20+5) : lx = lx - 5
  ech = key

def keyrelease(evn):
  global QUIT
  key= evn.char
  if key == "q" : QUIT = 1


def modify():
  global xx,yy,dx,dy
  if xx > 610 : xx=610; dx=-abs(dx)
  if xx < 20  : xx=20;  dx=abs(dx)
  if yy > 370 : yy=370; dy=-abs(dy)
  if yy < 20  : yy=20;  dy=abs(dy)
  xx=xx+dx; yy=yy+dy

def checkbrick(xx,yy):
  global pole
  xx=(xx-50) // 35; yy=(yy-30) // 20
  if (xx >= 0) and (xx <15) and (yy >= 0) and (yy<7):
     pole[yy][xx]=0
  
 

if __name__ == "__main__":
  wnd=tk.Tk()
  wnd.title("mainloop")
  wnd.geometry("640x480")
  wnd.resizable(width=False,height=False)

  img=tk.PhotoImage(width=640,height=400)
  can=tk.Canvas(wnd,width=640,height=400,bg="#000")
  can.place(x=0,y=0)
  can.create_image((0,0),image=img,state="normal",anchor=tk.NW)

  ok1=tk.Button(wnd,text="ok",width=10,command=quit)
  ok1.place(x=10,y=440)
  tx1=tk.Label(wnd,text="nieco")
  tx1.place(x=100,y=440)

  # wnd.mainloop()
  wnd.bind("<KeyPress>",keypress)       # stlacenie klavesy
  wnd.bind("<KeyRelease>",keyrelease)   # pustenie klavesy
  wnd.protocol("WM_DELETE_WINDOW",quit) # reaguje na kliknutie na [X] 
  while QUIT==0:
    X=X+1
    tx1.config(text=str(X)+"'"+ech+"'")

    img.put("#000",(0,0,640,400))
    img.put(stena,(0,0,640,20))
    img.put(stena,(0,380,640,400))
    img.put(stena,(0,20,20,379))
    img.put(stena,(620,20,640,379))
    for y in range(7):
      for x in range (15):
        if pole[y][x]:
          img.put(tehla[pole[y][x]],(x*35+50,y*20+30))

    img.put(lavka,(lx,365))
    img.put("#f11",(lx+10,365,lx+10+sirka,375))
    img.put(lavka,(lx+10+sirka,365))

    
    modify()
    qxx = int(xx); qyy = int(yy)
    if '0 0 0' <> img.get(qxx+5,qyy-2)  : dy = abs(dy);  checkbrick(qxx+5,qyy-2)
    if '0 0 0' <> img.get(qxx+5,qyy+11) : dy = -abs(dy); checkbrick(qxx+5,qyy+11)
    if '0 0 0' <> img.get(qxx-2,qyy+5)  : dx = abs(dx);  checkbrick(qxx-2,qyy+5)
    if '0 0 0' <> img.get(qxx+11,qyy+5) : dx = -abs(dx); checkbrick(qxx+11,qyy+5)
    img.put(gulka,(qxx,qyy))

    wnd.update_idletasks() # spracovava iba vsetky idle tasks (napriklad repaint geometrie), nespracovava eventy
    wnd.update()           # nesmie byt volana z callbacku eventu - spracovava eventy  (vlastne staci volat update() )
    # time.sleep(0.01)
  wnd.quit()
  wnd.destroy()

# --- end ---




"""
ABOUT UPDATE()
Processes all pending events, calls event callbacks, completes 
any pending geometry management, redraws widgets as necessary, 
and calls all pending idle tasks. 
This method should be used with care, since it may lead 
to really nasty race conditions if called from the wrong place 
(from within an event callback, for example, or from a function 
that can in any way be called from an event callback, etc.). 
When in doubt, use update_idletasks instead.



ABOUT UPDATE_IDLETASKS()
Calls all pending idle tasks, without processing any other events. 
This can be used to carry out geometry management and redraw widgets 
if necessary, without calling any callbacks.
"""

# --- end ---


